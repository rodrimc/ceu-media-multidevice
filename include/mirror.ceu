#include "media/raw.ceu"
#include "env-events.ceu"

/* internal */
event (void) mirror_ok;

#define KEY 0
#define CLICK 1

par/or do
  #include "mars-client.ceu"

  var& IStub stub;
  watching Stub (LOCALHOST, 8888, 0) -> (&stub)
  do
    par do
      var uint id;
      var usize peers;
      (id, peers) = await stub.joined;
      emit mirror_ok;
      emit id_ready (id);
    with
      loop do
        var uint new_peer;
        var usize peers;
        (new_peer, peers) = await stub.new_peer;
      end
    with
      every stub.incoming_message do
        _printf ("[APP(%u)] Message: %s\n", stub.id, &&stub.message[0]);

        [[ TABLE = load (@stub.message)() ]]
        var int type = [[ TABLE.type ]];
        var uint peer = [[ TABLE.id ]];

        if type == KEY then
          vector[] byte key = [] .. [[ TABLE.key ]];
          emit keyed (&&key[0], peer);

        else/if type == CLICK then
          emit clicked (peer);
        end
      end
    with
      /* KEY */
      loop do
        var _char_ptr_ext key = await send_key;
        stub.wbuffer = [] .. "{";
        stub.wbuffer = stub.wbuffer .. "id=" .. [[ tostring(@stub.id) ]];
        stub.wbuffer = stub.wbuffer .. ",type=" .. [[ tostring(@KEY) ]];
        stub.wbuffer = stub.wbuffer .. ",key=\'" .. (_ID(key) as _char&&) .. "'";
        stub.wbuffer = stub.wbuffer .. "}";

        emit stub.send;
        await stub.sent;
      end
    with
      /* CLICK */
      loop do
        await send_click;
        stub.wbuffer = [] .. "{";
        stub.wbuffer = stub.wbuffer .. "id=" .. [[ tostring(@stub.id) ]];
        stub.wbuffer = stub.wbuffer .. ",type=" .. [[ tostring(@CLICK) ]];
        stub.wbuffer = stub.wbuffer .. "}";

        emit stub.send;
        await stub.sent;
      end
    end
  end
with
  await mirror_ok;
  #include PROG
end

escape 0;
