#ifndef _CEU_MULTIDEVICE
#define _CEU_MULTIDEVICE

#include "uv/uv.ceu"
#include "uv/tcp.ceu"

#define LOCALHOST "0.0.0.0"
#define PORT 8888
#define BACKLOG 128

/* MESSAGE CODES */
#define JOIN             0
#define NEW_PEER         1
#define REGULAR_SEND     2
#define CONCURRENT_SEND  3
#define ORDERED_SEND     4
/* more? */

native/pre do
  ##include <time.h>

  long long unsigned int now (void)
  {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    return (long long unsigned int)ts.tv_sec * 1000000000L + ts.tv_nsec;
  }
end

native
  _now,
;

event (int) send_bradcast_join;
event (uint) send_bradcast;

var int id_ref = 1;
var uint peers_count = 0;

code/await Send_Broadcast_Join (var& _uv_tcp_t client, var int id) -> void
do
  vector[] byte buffer = [] .. "";

  buffer = [] .. "return {type=" .. [[ tostring(@NEW_PEER) ]];
  buffer = buffer .. ",new_peer=" .. [[ tostring (@id) ]];
  buffer = buffer .. ",peers=" .. [[ tostring (@outer.peers_count) ]];
  var u64 ts = _now ();
  buffer = buffer .. ",timestamp=" .. [[ tostring (@ts) ]];
  buffer = buffer .. "}\n";

  await UV_TCP_Write (&client, &buffer);
end

code/await Send_Broadcast_Message (var& _uv_tcp_t client, var uint from,
                                   vector& []byte payload) -> void
do
  vector[] byte buffer = [] .. "";

  buffer = [] .. "return {from=" .. [[ tostring (@from) ]];
  buffer = buffer .. ",payload=" .. payload;
  var u64 ts = _now ();
  buffer = buffer .. ",timestamp=" .. [[ tostring (@ts) ]];
  buffer = buffer .. "}\n";

  await UV_TCP_Write (&client, &buffer);
end

code/await UV_TCP_Server_Handler (var& _uv_tcp_t client) -> int
do
  var uint session = _;
  var int id = outer.id_ref;
  outer.id_ref = outer.id_ref + 1;
  var u64 start_time = 0;

  outer.peers_count = outer.peers_count + 1;
  do finalize with
    outer.peers_count = outer.peers_count - 1;
  end

  par do
    loop do
      vector[] byte buffer;
      await UV_TCP_ReadLine(&client, &buffer);
      _printf ("[server] received: %s\n", &&buffer[0]);

      var int type = _;

      [[ TABLE =  load (@buffer)()]]
      type = [[ TABLE.type ]];

      if type == JOIN then
        buffer = [] .. "return {";
        buffer = buffer .. "type=" .. [[ tostring (@JOIN) ]];
        buffer = buffer .. ",id=" .. [[ tostring(@id) ]];
        buffer = buffer .. ",peers=" .. [[ tostring(@outer.peers_count) ]];
        buffer = buffer .. "}\n";

        await UV_TCP_Write (&client, &buffer);
        _printf ("[server] sent: %s\n", &&buffer[0]);

        emit outer.send_bradcast_join (id);

      else/if type == REGULAR_SEND then
        var int from = [[ TABLE.from ]];
        vector[] byte payload = [] .. [[ TABLE.payload ]];
        spawn Send_Broadcast_Message (&client, from, &payload);
      end
    end
  with
    var int new_id;
    every new_id in outer.send_bradcast_join do
      if true then
        spawn Send_Broadcast_Join (&client, new_id);
      end
    end
  end

end

/* We must include tcp-server after we've defined UV_TCP_Server_Handler */
#include "uv/tcp-server.ceu"

data IPeer with
  var& _uv_tcp_t tcp;
  var uint id;
  vector&[] byte buffer;
  vector&[] byte message;
  event (void) joined;
  event (void) incoming_message;
  event (void) send;
  event (void) sent;
end

code/await Peer (var _char&& ip, var int port, var int session)
                          -> (var& IPeer peer)
                            -> void
do
  event& (void) connected;
  var& _uv_tcp_t tcp_;

  watching UV_TCP_Connect(ip, port) -> (&tcp_, &connected)
  do
    vector []byte buffer;
    vector []byte message;
    var IPeer ref_ = val IPeer (&tcp_, 0, &buffer, &message, _, _, _, _);
    peer = &ref_;

    await connected;

    par do
      buffer = [] .. "return {";
      buffer = buffer .. "type=" .. [[ tostring (@JOIN) ]];
      buffer = buffer .. "}\n";

      /* send JOIN message */
      await UV_TCP_Write(&ref_.tcp, &buffer);
    with
      loop do
        await ref_.send;
        await UV_TCP_Write(&ref_.tcp, &buffer);
        emit ref_.sent;
      end
    with
      /* await message */
      loop do
        event& usize ok;
        watching UV_Stream_Read(&ref_.tcp, &ref_.buffer) -> (&ok) do
          await ok;
          var usize i;
          loop i in [0 -> $ref_.buffer[ do
            if ref_.buffer[i] != { '\n' } then
              ref_.message = ref_.message .. [ref_.buffer[i]];
            else
              var int type = _;

              /* parse message */
              [[ TABLE =  load (@message)()]]

              type = [[ TABLE.type ]];

              if type == JOIN then
                ref_.id = [[ TABLE.id ]];
                _printf ("[Peer (%d)] My id: %d\n", ref_.id, ref_.id);
                emit ref_.joined;
              else
                _printf ("[Peer (%d)] Incoming message: %s\n", ref_.id,
                                                  &&ref_.message[0]);
                emit ref_.incoming_message;
              end

              ref_.message = [] .. "";
            end
          end
        end
      end
    end
  end
end
#endif
