#ifndef _CEU_MARS_DEFS
#define _CEU_MARS_DEFS

#define LOCALHOST "0.0.0.0"
#define R_PORT 8888
#define W_PORT 8889
#define BACKLOG 128
#define BYTE sizeof(byte)

/**** MESSAGE CODES ****/
/* peers -> server */
#define P_JOIN                10
#define P_REGULAR_SEND        11
#define P_TICK_RESPONSE       13

/* server -> peers */
#define S_ACCEPTED            20
#define S_NOT_ACCEPTED        21
#define S_NEW_PEER            22
#define S_BROADCAST           23
#define S_TICK_REQUEST        24

#define ACCEPTED               1
#define NOT_ACCEPTED          -1

#include "c.ceu"

#define ESTIMATED_NET_DELAY   30  /* ms */
#define ESTIMATED_CLOCK_DRIFT 0
#define MAX_LAG               2*ESTIMATED_NET_DELAY + ESTIMATED_CLOCK_DRIFT

native/pre do
  ##include <time.h>
  ##include <string.h>
  ##include <sys/socket.h>

  typedef struct sockaddr_in6 sockaddr_in6;
end

native/plain
  _AF_INET,
  _AF_INET6,
  _INET_ADDRSTRLEN,
  _INET6_ADDRSTRLEN,
  _sockaddr_in6,
;

native/nohold
  _uv_ip6_name,
  _uv_tcp_getpeername,
;

data Stub with
  var uint id;
  var&[] byte wbuffer;
  var&[] byte rbuffer;
  var&[] byte message;
  var bool ok;

  event (none) all_set_up;

  event (uint, usize) accepted;
  event (uint, usize) new_peer;
  event (none) incoming_message;

  event (none) send_message;
end

#include "uv/tcp.ceu"

event (uint) stream_released;

code/await Send (var uint id,
                 var& UV_Stream stream,
                 var&[] byte buffer) -> bool
do
  var bool success = true;

  var Exception? e;
  catch e do
    [[
      SEND_TABLE = SEND_TABLE or {}
      if SEND_TABLE[@id] == nil then
        SEND_TABLE[@id] = false
      end
    ]]

    var bool stream_is_busy = [[ SEND_TABLE[@id] ]];
    if (stream_is_busy) then
      var uint stream_id = await outer.stream_released until stream_id == id;
    end

    [[ SEND_TABLE[@id] = true ]]

    var[] byte buff = [] .. buffer;
    stream.buffer = [] .. [[ string.char (@$buff) .. @buff ]];
    var ssize n = $stream.buffer;
    var ssize len = await UV_Stream_Write_N (&stream, n as usize);
    if len != n  then
      success = false;
    end

    [[ SEND_TABLE[@id] = false ]]
  end

  if e? then
    _fprintf(_stderr, "[error]: %s\n", e!.message);
    success = false;

    catch e do
      [[ SEND_TABLE[@id] = false ]]
    end
  end

  emit outer.stream_released (id);

  escape success;
end

code/await Receive (var& UV_Stream stream,
                    var&[] byte buff) -> bool
do
  var bool success = true;

  var Exception? e;
  catch e do
    var ssize len = await UV_Stream_Read_N (&stream, BYTE);

    buff = [] .. stream.buffer;
    $stream.buffer = $stream.buffer - (len as usize);

    if len == 1 then
      var byte b_len = [[ tonumber (string.byte(@buff)) ]];
      len = await UV_Stream_Read_N (&stream, b_len as usize);
      buff = [] .. stream.buffer;
      $stream.buffer = $stream.buffer - (len as usize);

      if len != (b_len as ssize) then
        $buff = 0;
        success = false;
      end
    else
      $buff = 0;
      success = false;
    end
  end
  if e? then
    $buff = 0;
    success = false;
  end

  escape success;
end

code/await Get_Net_Address (var& UV_Stream stream,
                            var& [] byte ip) -> u16
do
  var _sockaddr_storage sock = _;
  var int len = sizeof(_sockaddr_in) as int;
  var int ret = _uv_tcp_getpeername(&&stream.handle as _uv_tcp_t&&,
    (&&sock as _sockaddr&&), &&len);
  _ceu_assert(ret == 0, "could not get socket peer name");

  /* INET6_ADDRSTRLEN is supposed to be large enough to accommodate ipv4 and ipv6 */
  var u16 port = _;

  if sock.ss_family == _AF_INET then
    var _sockaddr_in&& src = &&sock as _sockaddr_in &&;
    var[_INET_ADDRSTRLEN] byte tmp = _;

    ret = _uv_ip4_name(src, &&tmp[0], _INET_ADDRSTRLEN);
    _ceu_assert(ret == 0, "could not get ipv4 name");

    ip = [] .. &&tmp[0] as _char&&;

    port = _ntohs(src:sin_port);
  else/if sock.ss_family == _AF_INET6 then
    var _sockaddr_in6&& src = &&sock as _sockaddr_in6 &&;
    var[_INET6_ADDRSTRLEN] byte tmp = _;

    ret = _uv_ip6_name(src, &&ip[0], _INET6_ADDRSTRLEN);
    _ceu_assert(ret == 0, "could not get ipv6 name");

    ip = [] .. &&tmp[0] as _char&&;

    port = _ntohs(src:sin6_port);
  end

  escape port;
end

#endif
