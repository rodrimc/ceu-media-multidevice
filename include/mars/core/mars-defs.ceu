#ifndef _CEU_MARS_DEFS
#define _CEU_MARS_DEFS

#define LOCALHOST "0.0.0.0"
#define R_PORT 8888
#define W_PORT 8889
#define BACKLOG 128
#define BYTE sizeof(byte)

/**** MESSAGE CODES ****/
/* peers -> server */
#define P_JOIN                10
#define P_REGULAR_SEND        11
#define P_CONCURRENT_SEND     12
#define P_ORDERED_SEND        13

/* server -> peers */
#define S_JOINED              20
#define S_NEW_PEER            21
#define S_BROADCAST           22
#define S_TICK                23

/* event codes */
#define EVT_KEY               "CM_SCENE_KEY\0"
#define EVT_SCENE_CLICK       "CM_SCENE_CLICK\0"
#define EVT_PLAYER_CLICK      "CM_PLAYER_CLICK\0"
/* more? */

#include "c.ceu"
#include <r-util.ceu>

native/pre do
  ##include <time.h>
  ##include <string.h>

  long long unsigned int now (void)
  {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    return (long long unsigned int)ts.tv_sec * 1000000000L + ts.tv_nsec;
  }

end

native/nohold
  _now,
;

[[
   function serialize (o)
     local result = '{'
     for k,v in pairs(o) do
       result = result ..  k .. '='
       if type (v) == 'string' then
         result = result .. "'" .. v .. "',"
       else
         result = result .. tostring(v) .. ','
       end
     end
     result = result .. '}'
     return result
   end
]]

data Stub with
  var uint id;
  var&[] byte wbuffer;
  var&[] byte rbuffer;
  var&[] byte message;

  event (none) all_set_up;

  event (uint, usize) joined;
  event (uint, usize) new_peer;
  event (none) incoming_message;

  event (none) send_message;
end

#include "uv/tcp.ceu"

event (uint) stream_released;

code/await Send (var uint id,
                 var& UV_Stream stream,
                 var&[] byte buffer) -> bool
do
  var bool success = true;

  var Exception? e;
  catch e do
    [[
      SEND_TABLE = SEND_TABLE or {}
      if SEND_TABLE[@id] == nil then
        SEND_TABLE[@id] = false
      end
    ]]

    var bool stream_is_busy = [[ SEND_TABLE[@id] ]];
    if (stream_is_busy) then
      var uint stream_id = await outer.stream_released until stream_id == id;
    end

    [[ SEND_TABLE[@id] = true ]]

    var[] byte buff = [] .. buffer;
    stream.buffer = [] .. [[ string.char (@$buff) .. @buff ]];
    var ssize n = $stream.buffer;
    var ssize len = await UV_Stream_Write_N (&stream, n as usize);
    if len != n  then
      success = false;
    end

    [[ SEND_TABLE[@id] = false ]]
  end

  if e? then
    _fprintf(_stderr, "[error]: %s\n", e!.message);
    success = false;

    catch e do
      [[ SEND_TABLE[@id] = false ]]
    end
  end

  emit outer.stream_released (id);

  escape success;
end

code/await Receive (var& UV_Stream stream,
                    var&[] byte buff) -> bool
do
  var bool success = true;

  var Exception? e;
  catch e do
    var ssize len = await UV_Stream_Read_N (&stream, BYTE);

    buff = [] .. stream.buffer;
    $stream.buffer = $stream.buffer - (len as usize);

    if len == 1 then
      var byte b_len = [[ tonumber (string.byte(@buff)) ]];
      len = await UV_Stream_Read_N (&stream, b_len as usize);
      buff = [] .. stream.buffer;
      $stream.buffer = $stream.buffer - (len as usize);

      if len != (b_len as ssize) then
        $buff = 0;
        success = false;
      end
    else
      $buff = 0;
      success = false;
    end
  end
  if e? then
    $buff = 0;
    success = false;
  end

  escape success;
end

#endif
