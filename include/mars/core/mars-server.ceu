#ifndef _CEU_MARS_SERVER
#define _CEU_MARS_SERVER

#include "mars-defs.ceu"

#include "uv/tcp.ceu"

data UV_TCP_Server_Data;

/*** SERVER SIDE ***/
event (uint) send_broadcast_join;
event (uint) send_broadcast_message;
var []byte cur_payload;

var uint id_ref = 1;
var usize peers_count = 0;

code/await Send_Join_Reply (var& UV_Stream client, var uint id) -> none
do
  var[] byte buf = [] .. "return {type=";
  var[] byte tmp = [] .. [[ tostring (@S_JOINED) ]];

  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",id=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. [[ tostring (@id) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",peers=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. [[ tostring (@outer.peers_count) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. "}";
  call Str_Cat (&buf, &tmp);

  client.wBuffer = [] .. buf .. "\n";

  _debug ("[server] sending: %s\n", &&client.wBuffer[0]);
  await UV_Stream_Write_N (&client, _);
end


code/await Send_Broadcast_Join (var& UV_Stream client, var uint id) -> none
do
  var[] byte buf = [] .. "return {type=";
  var[] byte tmp = [] .. [[ tostring (@S_NEW_PEER) ]];

  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",new_peer=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. [[ tostring (@id) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",peers=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. [[ tostring (@outer.peers_count) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",timestamp=";
  call Str_Cat (&buf, &tmp);

  var u64 ts = _now ();

  tmp = [] .. [[ tostring (@ts) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. "}";
  call Str_Cat (&buf, &tmp);

  client.wBuffer = [] .. buf .. "\n";

  _debug ("[server] sending: %s\n", &&client.wBuffer[0]);
  await UV_Stream_Write_N (&client, _);
end

code/await Send_Broadcast_Message (var& UV_Stream client, var uint from,
                                   var& []byte payload) -> none
do
  var[] byte buf = [] .. "return {type=";
  var[] byte tmp = [] .. [[ tostring (@S_BROADCAST) ]];

  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",from=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. [[ tostring (@from) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",payload=";
  call Str_Cat (&buf, &tmp);

  tmp = [] .. payload;
  call Str_Cat (&buf, &tmp);

  tmp = [] .. ",timestamp=";
  call Str_Cat (&buf, &tmp);

  var u64 ts = _now ();
  tmp = [] .. [[ tostring (@ts) ]];
  call Str_Cat (&buf, &tmp);

  tmp = [] .. "}";
  call Str_Cat (&buf, &tmp);

  client.wBuffer = [] .. buf .. "\n";

  _debug ("[server] sending: %s\n", &&client.wBuffer[0]);
  await UV_Stream_Write_N (&client, _);
end

/* Handler for each client */
code/await UV_TCP_Server_Handler (var& UV_Stream client,
                                  var& UV_TCP_Server_Data shared) -> int
do
  var uint session = _;
  var uint id = outer.id_ref;
  outer.id_ref = outer.id_ref + 1;
  var u64 start_time = 0;

  outer.peers_count = outer.peers_count + 1;
  do finalize with
    outer.peers_count = outer.peers_count - 1;
  end

  pool[] Send_Join_Reply        pool_join_reply;
  pool[] Send_Broadcast_Join    pool_broadcast_join;
  pool[] Send_Broadcast_Message pool_broadcast_message;

  par do
    loop do
      var [] byte buffer;
      call Clear_Vector (&client.rBuffer);

      await UV_Stream_Read_Line(&client, &buffer);
      _debug ("[server] received: %s\n", &&buffer[0]);

      var int type = _;

      [[ TABLE =  load (@buffer)() ]]
      type = [[ TABLE.type ]];

      if type == P_JOIN then
        spawn Send_Join_Reply (&client, id) in pool_join_reply;
        emit outer.send_broadcast_join (id);
      else/if type == P_REGULAR_SEND then
        var int from = [[ TABLE.from ]];
        var [] byte payload = [] .. [[ serialize(TABLE.payload) ]];

        outer.cur_payload = [] .. payload;
        emit outer.send_broadcast_message (from);
      end
    end
  with
    var uint new_id;
    every new_id in outer.send_broadcast_join do
      spawn Send_Broadcast_Join (&client, new_id)
            in pool_broadcast_join;
    end
  with
    var uint from;
    every from in outer.send_broadcast_message do
      spawn Send_Broadcast_Message (&client, from, &outer.cur_payload)
            in pool_broadcast_message;
    end
  end

end

/* We must include tcp-server after we've defined UV_TCP_Server_Handler */
#include "uv/tcp-server.ceu"

#endif
