#ifndef _CEU_MARS_CLIENT
#define _CEU_MARS_CLIENT

/* Client Lua global */
[[
  CLIENT =
    {
      role =
      {
        name = nil,
        index = nil
      },
      evts =
      {
        mapping = nil
      }
    }
]]

#include "mars-defs.ceu"

/*** CLIENT API ***/

code/await Client_Send_Message (var& Stub stub, var&[] byte buffer) -> none
do
  var Exception.Lua? e;
  catch e do
    var u64 ts = _now();
    [[
      luabuff = 'type='      .. tostring(@P_REGULAR_SEND)    .. ',' ..
                'from='      .. tostring(@stub.id)           .. ',' ..
                'role="'     .. CLIENT.role.name             .. '",' ..
                'payload='   .. tostring(@buffer)            .. ',' ..
                'timestamp=' .. tostring(@ts)
    ]]

    stub.wbuffer = [] .. [[ luabuff ]];
    emit stub.send_message;
  end
  if e? then
    _fprintf (_stderr, "[Client_Send_Message error]: %s\n", e!.message);
  end
end

code/await Handle_Message (var& Stub stub) -> none
do
  var Exception.Lua? e;
  catch e do

    var int type = _;

    /* parse message */
    [[ TABLE =  load ('return{' .. @stub.rbuffer .. '}')() ]]
    type = [[ TABLE.type ]];

    if type == S_JOINED then
      stub.id = [[ TABLE.id ]];
      var uint peers = [[ TABLE.peers ]];

      [[
        CLIENT.role.name = TABLE.role or  ''
        CLIENT.role.index = TABLE.index or  -1
      ]]

      emit stub.joined (stub.id, peers);

    else/if type == S_NEW_PEER then
      var uint new_peer = [[ TABLE.peers ]];
      var uint peers = [[ TABLE.peers ]];

      emit stub.new_peer (new_peer, peers);
    else/if type == S_BROADCAST then
      [[ payload = 'return' .. serialize(TABLE.payload) ]]

      outer.evt_dev_role = [] .. [[ TABLE.role or '' ]];
      stub.message= [] .. [[ payload ]];

      emit stub.incoming_message;

      outer.evt_dev_role = _;
      $stub.message = 0;
    else/if type == S_TICK then
      var uint tick = [[ TABLE.freq ]];
      /* TODO */
    else
      _printf ("[Client (%d) Unknow message type.\n", stub.id);
    end
  end
  if e? then
    _fprintf (_stderr, "[Handle_Message error]: %s\n", e!.message);
  end
end

code/await Client (var _char&& ip, var int session)
                          -> (var& Stub stub)
                            -> none
                  throws Exception.Uv
do
  var&? UV_TCP_Connect r_conn = spawn UV_TCP_Connect(ip, W_PORT, _);
  var&? UV_TCP_Connect w_conn = spawn UV_TCP_Connect(ip, R_PORT, _);

  event (none) stream_ready;

  var[] byte rbuffer;
  var[] byte wbuffer;
  var[] byte message;

  watching r_conn, w_conn do
    var Stub ref_ = val Stub (0, &wbuffer, &rbuffer, &message,  _, _, _, _, _);
    stub = &ref_;

    par do
      /* read trail */
      par/and do
        pool [] Handle_Message pool_handle_message;
        loop do
          var[] byte buff;
          var bool success = await Receive (&r_conn.stream, &buff);
          if success then
            stub.rbuffer = [] .. buff;
            spawn Handle_Message (&stub) in pool_handle_message;
          end
        end
      with
        await r_conn.ok;
        emit stream_ready;
      end
    with
      /* write trail */
      par/and do
        pool [] Send pool_send;
        every stub.send_message do
          spawn Send (stub.id, &w_conn.stream, &stub.wbuffer) in pool_send;
        end
      with
        await w_conn.ok;
        emit stream_ready;
      end
    with
      var usize i;
      loop i in [1 -> 2] do
        await stream_ready;
      end
      emit stub.all_set_up;

      var Exception? e;
      catch e do
        [[
          luabuff = 'type=' .. tostring(@P_JOIN)
        ]]
        stub.wbuffer = [] .. [[ luabuff ]];

        /* send P_JOIN message */
        await Send (stub.id, &r_conn.stream, &stub.wbuffer);
      end

      if e? then
        _fprintf (_stderr, "[error]: %s\n", e!.message);
      end
    end
  end
end

#endif
