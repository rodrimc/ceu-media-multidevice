#ifndef ENV_EVENTS_
#define ENV_EVENTS_

#include "c.ceu"
#include "media/raw.ceu"

/* Scene */
event (uint, int, int, int, bool) mars_scene_mouse_clicked;
event (uint, _char_ptr_ext, bool) mars_scene_key;

event (uint, uint, _char_ptr_ext, bool) remote_mars_scene_key;
event (uint, uint, int, int, int, bool) remote_mars_scene_mouse_clicked;

/* Player */
event (int, int, int, bool) mars_player_mouse_clicked;

event (uint, uint, int, int, int, bool) remote_mars_player_mouse_clicked;

var uint device_id = 0;

/* SCENE INPUT EVENTS */
input (uint, uint, int, int, int, bool) CM_SCENE_MOUSE_CLICK;
input (uint, uint, int, int)            CM_SCENE_MOUSE_MOVE;
input (uint, uint, _char_ptr_ext, bool) CM_SCENE_KEY;
input (uint, uint, u64)                 CM_SCENE_TICK;
input (uint, uint, _char_ptr_ext)       CM_SCENE_ERROR;

/* PLAYER INPUT EVENTS */
input (uint, uint)                      CM_PLAYER_START;
input (uint, uint)                      CM_PLAYER_STOP;
input (uint, uint)                      CM_PLAYER_PAUSE;
input (uint, uint)                      CM_PLAYER_SOUGHT;
input (uint, uint, int, int, int, bool) CM_PLAYER_MOUSE_CLICK;

/* SCENE */
data IScene with
  var& ISceneRaw  raw;
  var&  uint      self;
  event (void)    quit;
end

code/await
Scene (var Size? size)
                -> (var& IScene scene)
                    -> void
do
  var& ISceneRaw raw;
  var Size raw_size =  _;
  if (size?) then
    raw_size = size!;
  end
  watching Scene_Raw (raw_size) -> (&raw)
  do
    var IScene ref_ = val IScene (&raw, _, _, _, _, _, _);
    scene = &ref_;
    par do
      var uint id;
      var int x;
      var int y;
      var int button;
      var bool press;
      loop do
        (id, x, y, button, press) = await CM_SCENE_RAW_MOUSE_CLICK; 
        emit outer.mars_scene_mouse_clicked (id, x, y, button, press);
      end
    with
      var uint id;
      var _char_ptr_ext key;
      var bool press;
      loop do
        (id, key, press) = await CM_SCENE_RAW_KEY;
        emit outer.mars_scene_key (id, key, press);
      end
    with
      var uint id;
      var int x;
      var int y;
      loop do
        (id, x, y) = await CM_SCENE_RAW_MOUSE_MOVE; 
        await async (id, x, y) do
          emit CM_SCENE_MOUSE_MOVE (id, x, y);
        end
      end
    with
      var uint id;
      var u64 tick;
      loop do
        (id, tick) = await CM_SCENE_RAW_TICK; 
        await async (id, tick) do
          emit CM_SCENE_TICK (id, tick);
        end
      end
    with
      var uint id;
      var _char_ptr_ext error;
      loop do
        (id, error) = await CM_SCENE_RAW_ERROR; 
        await async (id, error) do
          emit CM_SCENE_ERROR (id, error);
        end
      end
    with
      await ref_.quit;
      emit raw.quit;

    /* REMOTE EVENTS */
    with
      /* KEY */
      var uint device;
      var uint id;
      var _char_ptr_ext key;
      var bool press;
      loop do
        (device, id, key, press) in outer.remote_mars_scene_key;
        async (device, id, key, press) do
          emit CM_SCENE_KEY (device, id, key, press);
        end
      end
    with
      /* MOUSE CLICKED */
      var uint device;
      var uint id; 
      var int x;
      var int y;
      var int button;
      var bool press;
      var uint peer;
      loop do
        (device, id, x, y, button, press) = await 
                                      outer.remote_mars_scene_mouse_clicked;
        async (device, id, x, y, button, press) do
          emit CM_SCENE_MOUSE_CLICK (device, id, x, y, button, press);
        end
      end
    end
  end
end

/* Scene functions */
code/tight
Scene_Pause (var& IScene scene) -> void
do
  call Scene_Raw_Pause (&scene.raw);
end

code/tight
Scene_Resume (var& IScene scene) -> void
do
  call Scene_Raw_Resume (&scene.raw);
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> void
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw             raw;
  event void                  ok;
  event void                  sought;
  event (int, int, int, bool) mouse_clicked;
end

code/await Play (var& IScene scene, var& Media media)
                  -> (var& IPlayer player)
                      -> void
do
  var& IPlayerRaw raw;

  watching Play_Raw (&scene.raw, &media) -> (&raw)
  do
    var IPlayer ref_ = val IPlayer (&raw, _, _, _);
    player = &ref_;
    par do
      every raw.ok do
        emit ref_.ok;
      end
    with
      every raw.sought do
        emit ref_.sought;
      end
    with
      var int x;
      var int y;
      var int button;
      var bool press;
      every (x, y, button, press) in raw.mouse_clicked do
        emit outer.mars_player_mouse_clicked (x, y, button, press);
      end
    end
  end
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media media) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &media);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Text text) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Image image) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Audio audio) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Video video) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> void
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> void
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> void
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> void
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var u64 time, var bool relative) -> void
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
