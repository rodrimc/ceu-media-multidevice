#ifndef ENV_EVENTS_
#define ENV_EVENTS_

#include "c.ceu"
#include "media/raw.ceu"
#include "mars/mars-media-aux.ceu"

/* SCENE */
data IScene with
  var& ISceneRaw  raw;
  var&  uint      self;
  event (void)    quit;
end

code/await
Scene (var Size? size)
                -> (var& IScene scene)
                    -> void
do
  var& ISceneRaw raw;
  var Size raw_size =  _;
  var& uint device_id_ref = &outer.device_id;

  if (size?) then
    raw_size = size!;
  end
  watching Scene_Raw (raw_size) -> (&raw)
  do
    var uint self = _SCENE_SEED;
    _SCENE_SEED = _SCENE_SEED + 1;

    var IScene ref_ = val IScene (&raw, &self, _);
    scene = &ref_;
    par do
      var _GObject&& source;
      var int x;
      var int y;
      var int button;
      var bool press;
      every (source, x, y, button, press) in CM_SCENE_RAW_MOUSE_CLICK do
        if _LP_SCENE(source) == &&raw.ref then
          emit outer.mars_scene_mouse_clicked (ref_.self, x, y, button, press);
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext key;
      var bool press;
      every (source, key, press) in CM_SCENE_RAW_KEY do
        if _LP_SCENE(source) == &&raw.ref then
          emit outer.mars_scene_key (ref_.self, key, press);
        end
      end
    with
      var _GObject&& source;
      var int x;
      var int y;
      pool [] Emit_Scene_Mouse_Move_Event scene_mouse_move_event_pool;
      every (source, x, y) in CM_SCENE_RAW_MOUSE_MOVE do
        if _LP_SCENE(source) == &&raw.ref then
          spawn Emit_Scene_Mouse_Move_Event (outer.device_id, ref_.self, x, y)
                                             in scene_mouse_move_event_pool;
        end
      end
    with
      var _GObject&& source;
      var u64 tick;
      pool [] Emit_Scene_Tick_Event scene_tick_event_pool;
      every (source, tick) in CM_SCENE_RAW_TICK do
        if _LP_SCENE(source) == &&raw.ref then
          spawn Emit_Scene_Tick_Event (outer.device_id, ref_.self, tick)
                                       in scene_tick_event_pool;
        end
      end
    with
      var _GObject&& source;
      var _char_ptr_ext error;
      pool [] Emit_Scene_Error_Event scene_error_event_pool;
      every (source, error) in CM_SCENE_RAW_ERROR do
        if _LP_SCENE(source) == &&raw.ref then
          spawn Emit_Scene_Error_Event (outer.device_id, error)
                                        in scene_error_event_pool;
        end
      end
    with
      await ref_.quit;
      emit raw.quit;

    /* REMOTE EVENTS */
    with
      /* KEY */
      var uint device;
      var uint id;
      var _char_ptr_ext key;
      var bool press;
      pool [] Emit_Scene_Key_Event scene_key_event_pool;
      every (device, id, key, press) in outer.remote_mars_scene_key do
        spawn Emit_Scene_Key_Event (device, id, key, press)
                                    in scene_key_event_pool;
      end
    with
      /* MOUSE CLICKED */
      var uint device = 0;
      var uint id = 0;
      var int x = 0;
      var int y = 0;
      var int button = 0;
      var bool press = false;

      par do
        pool [] Emit_Scene_Mouse_Click_Event scene_mouse_click_event_pool;
        every (device, id, x, y, button, press)
                                     in outer.remote_mars_scene_mouse_clicked do
          spawn Emit_Scene_Mouse_Click_Event (device, id, x, y, button, press)
                                              in scene_mouse_click_event_pool;
        end
      with
        pool [] Emit_Player_Mouse_Click_Event player_mouse_click_event_pool;
        every (device, id, x, y, button, press)
                                     in outer.remote_mars_player_mouse_clicked do
          spawn Emit_Player_Mouse_Click_Event (device, id, x, y, button, press)
                                              in player_mouse_click_event_pool;
        end
      end
    end
  end
end

/* Scene functions */
code/tight
Scene_Pause (var& IScene scene) -> void
do
  call Scene_Raw_Pause (&scene.raw);
end

code/tight
Scene_Resume (var& IScene scene) -> void
do
  call Scene_Raw_Resume (&scene.raw);
end

code/tight
Scene_Set_Tick_Interval (var& IScene scene, var u64 interval) -> void
do
  call Scene_Raw_Set_Tick_Interval (&scene.raw, interval);
end

/* PLAYER */
data IPlayer with
  var& IPlayerRaw raw;
  var& uint       self;
end

code/await Play (var& IScene scene, var& Media media)
                  -> (var& IPlayer player)
                      -> void
do
  var& IPlayerRaw raw;

  watching Play_Raw (&scene.raw, &media) -> (&raw)
  do
    var uint self = _PLAYER_SEED;
    _PLAYER_SEED = _PLAYER_SEED + 1;

    var IPlayer ref_ = val IPlayer (&raw, &self);
    player = &ref_;
    par do
      var _GObject&& source;
      pool [] Emit_Player_Start_Event player_start_event_pool;
      every (source) in CM_PLAYER_RAW_START do
        if _LP_MEDIA(source) == &&raw.ref then
          spawn Emit_Player_Start_Event (outer.device_id, ref_.self)
                                         in player_start_event_pool;
        end
      end
    with
      var _GObject&& source;
      pool [] Emit_Player_Sought_Event player_sought_event_pool;
      every (source) in CM_PLAYER_RAW_SOUGHT do
        if _LP_MEDIA(source) == &&raw.ref then
          spawn Emit_Player_Sought_Event (outer.device_id, ref_.self)
                                         in player_sought_event_pool;
        end
      end
    with
      var _GObject&& source;
      pool [] Emit_Player_Stop_Event player_stop_event_pool;
      every (source) in CM_PLAYER_RAW_STOP do
        if _LP_MEDIA(source) == &&raw.ref then
          spawn Emit_Player_Stop_Event (outer.device_id, ref_.self)
                                         in player_stop_event_pool;
        end
      end
    with
      var _GObject&& source;
      var int x;
      var int y;
      var int button;
      var bool press;
      every (source, x, y, button, press) in CM_PLAYER_RAW_MOUSE_CLICK do
        if _LP_MEDIA(source) == &&raw.ref then
          emit outer.mars_player_mouse_clicked (ref_.self, x, y, button, press);
        end
      end
    end
  end
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media media) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &media);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Text text) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &text);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Image image) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &image);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Audio audio) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &audio);
end

code/tight/dynamic
Player_Set_Media (var& IPlayer player, dynamic var& Media.Video video) -> void
do
  call/dynamic Player_Raw_Set_Media (&player.raw, &video);
end

code/tight
Player_Set_Char (var& IPlayer player, var _char&& name, var _char&& value) -> void
do
  call Player_Raw_Set_Char (&player.raw, name, value);
end

code/tight
Player_Set_Int (var& IPlayer player, var _char&& name, var int value) -> void
do
  call Player_Raw_Set_Int (&player.raw, name, value);
end

code/tight
Player_Get_Int (var& IPlayer player, var _char&& name) -> int
do
  escape call Player_Raw_Get_Int (&player.raw, name);
end

code/tight
Player_Set_Bool (var& IPlayer player, var _char&& name, var bool value) -> void
do
  call Player_Raw_Set_Bool (&player.raw, name, value);
end

code/tight
Player_Get_Bool (var& IPlayer player, var _char&& name) -> bool
do
  escape call Player_Raw_Get_Bool (&player.raw, name);
end

code/tight
Player_Set_Region (var& IPlayer player, var Region region) -> void
do
  call Player_Raw_Set_Region (&player.raw, region);
end

code/tight
Player_Seek (var& IPlayer player, var u64 time, var bool relative) -> void
do
  call Player_Raw_Seek (&player.raw, time, relative);
end

code/tight
Player_Get_Running_Time (var& IPlayer player) -> u64
do
  escape call Player_Raw_Get_Running_Time (&player.raw);
end

#endif
