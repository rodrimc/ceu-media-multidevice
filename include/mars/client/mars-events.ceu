var uint device_id  = 0;
var uint evt_dev_id = 0;
var[] byte evt_dev_role = _;
var int evt_dev_role_index = -1;

[[
  function get_mapping (evt)
    local map = {} 
    if type(CLIENT.mapping.events) == 'table' then
      for k,v in pairs (CLIENT.mapping.events) do
        if v[1] == evt then
          table.insert(map, v)
        end
      end
    end
    return map
  end

  function get_mapping_indices (evt, role_from)
    local indices = {} 
    if type(CLIENT.mapping.events) == 'table' then
      for i=1, #CLIENT.mapping.events do
        if CLIENT.mapping.events[i][1] == evt and
          (CLIENT.mapping.events[i][2] == role_from or
           CLIENT.mapping.events[i][2] == nil) then
          table.insert(indices, i)
        end
      end
    end
    return indices
  end

  function has_mapping (evt, role, is_local)
    map = get_mapping (evt)

    for i=1, #map do
      if is_local then
        if map[i][2] == role or map[i][2] == nil then
          return true
        end
      else
        if (map[i][2] == role or map[i][2] == nil) and 
           (map[i][4] == CLIENT.role.name or map[i][4] == nil) then
          return true
        end
      end
    end
    return false
  end

  function apply_mapping (evtFrom, from, evtTo)
    local toEmit = true
    local args = CLIENT.remote.args

    local map = get_mapping (evtFrom)
    local m
    for i=1, #map do
      if map[i][3] == evtTo then
        m = map[i]
        break
      end
    end

    if m == nil then
      print ("you're not supposed to get here")
      return false 
    end

    local func = m[5] or nil

    CLIENT.mapping.args = args
    if type (func) == 'function' then
      toEmit, mapped = func (args, from)
      if toEmit then
        CLIENT.mapping.args = mapped or args
      end
    end
    return toEmit
  end

]]

code/tight Has_Mapping (var _char&& evt,
                        var& []byte role,
                        var bool is_local) -> bool
do
  var bool has_mapping = false;
  has_mapping = [[ CLIENT.mapping.events [@evt] == true ]];

  escape has_mapping;
end

code/tight Get_Mapping_Indices (var _char&& evt,
                                var&[] byte role_from,
                                var& []int mapping) -> none
do
  [[
    indices = get_mapping_indices (@evt, @role_from)
  ]]
  var int len = [[ #indices ]];
  var ssize i;
  $mapping = 0;
  loop i in [1 -> len] do
    var int index = [[ indices[@i] ]];
    mapping = mapping .. [ index ];
  end
end
