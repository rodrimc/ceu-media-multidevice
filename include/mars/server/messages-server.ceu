event (none) message_sent;

code/await Send_Tick_Request (var uint handle_id,
                              var& UV_Stream stream,
                              var uint seq) -> none
do
  var Exception.Lua? e;
  catch e do
    [[
      luabuff = 'type='   .. tostring(S_TICK_REQUEST) .. ',' ..
                'seq='    .. tostring(@seq)
    ]]
    var[] byte buff = [] .. [[ luabuff ]];
    await Send (handle_id, &stream, &buff);
  end
  if e? then
    _fprintf (_stderr, "[Send_Tick_Request error]: %s\n", e!.message);
  end
end

code/await Send_Not_Joined_Reply (var uint handle_id,
                                  var& UV_Stream stream) -> none
do
  var Exception.Lua? e;
  catch e do
    [[
      luabuff = 'type='   .. tostring(S_NOT_ACCEPTED)
    ]]
    var[] byte buff = [] .. [[ luabuff ]];
    await Send (handle_id, &stream, &buff);
  end
  if e? then
    _fprintf (_stderr, "[Send_Not_Joined_Reply error]: %s\n", e!.message);
  end
end

code/await Send_Join_Reply (var uint handle_id,
                            var& UV_Stream stream) -> none
do
  var Exception.Lua? e;
  catch e do
    [[
      luabuff = ''
      if peer then
        luabuff = 'type='       .. tostring(S_ACCEPTED)         .. ',' ..
                  'id='         .. tostring(@handle_id)         .. ',' ..
                  'peers='      .. tostring(@outer.peers_count)
      end
    ]]
    var[] byte buff = [] .. [[ luabuff ]];
    await Send (handle_id, &stream, &buff);
  end
  if e? then
    _fprintf (_stderr, "[Send_Join_Reply error]: %s\n", e!.message);
  end
end

code/await Send_Broadcast_Join (var uint handle_id,
                                var& UV_Stream stream,
                                var uint id) -> none
do
  var Exception.Lua? e;
  catch e do
    [[
      luabuff = 'type='      .. tostring(@S_NEW_PEER)        .. ',' ..
                'new_peer='  .. tostring(@id)                .. ',' ..
                'peers='     .. tostring(@outer.peers_count)
    ]]
    var[] byte buff = [] .. [[ luabuff ]];

    await Send (handle_id, &stream, &buff);
  end
  if e? then
    _fprintf (_stderr, "[Send_Broadcast_Join error]: %s\n", e!.message);
  end
end

code/await Send_Message (var uint handle_id,
                         var& UV_Stream stream,
                         var uint message_seq,
                         var& []byte payload) -> none
do
  spawn Send_Tick_Request (handle_id, &stream, message_seq);
  var uint seq;
  var s32 delay;
  (seq, delay) = await outer.message_delay until (seq == message_seq);

  var Exception.Lua? e;
  catch e do
    [[
      luabuff = 'type='       .. tostring(S_BROADCAST)        .. ',' ..
                'delay='      .. tostring(@delay)             .. ',' ..
                'seq='        .. tostring(@message_seq)       .. ',' ..
                'payload='    .. tostring(@payload)
    ]]
    var[] byte buff = [] .. [[ luabuff ]];
    await Send (handle_id, &stream, &buff);

    emit outer.message_sent ();
  end
  if e? then
    _fprintf (_stderr, "[Send_Broadcast_Message error]: %s\n", e!.message);
  end
end
