#include "mars/mars-media.ceu"
#include "mars/core/mars-client.ceu"

/* internal */
event (none) mirror_ok;

par/or do
  var int min_peers = _;

  code/tight Load_Sync_Config (none) -> none do
    [[
      CONFIG = {}
      min_peers = 2
      chunk = loadfile ('config.lua')
      if chunk then
        CONFIG = chunk ()

        min_peers = CONFIG.MIN_PEERS or min_peers
      end
    ]]
    outer.min_peers = [[ min_peers ]];
  end

  call Load_Sync_Config ();


  var&? Client client = spawn Client (LOCALHOST, 0);
  watching client do
    await client.stub.all_set_up;

    pool [] Client_Send_Message send_message_pool;
    par do
      var uint id;
      var usize peers;
      (id, peers) = await client.stub.joined;
      _printf ("joined\n");
      /* device_id is defined in mars-media.ceu */
      device_id = id;
    with
      watching mirror_ok do
        var uint new_peer;
        var usize peers;
        every (new_peer, peers) in client.stub.new_peer do
          if (peers >= min_peers) then
            emit mirror_ok;
          end
        end
      end
    with
      loop do
        await client.stub.incoming_message;
        _log ("[APP(%u)] Message: %s\n", client.stub.id, &&client.stub.message[0]);

        [[ TABLE = load (@client.stub.message)() ]]
        var uint device = [[ TABLE.device ]];
        var uint obj = [[ TABLE.object ]];
        var int type = [[ TABLE.type ]];

        if type == EVT_KEY then
          var[] byte key = [] .. [[ TABLE.key ]];
          var bool press = [[ TABLE.press ]];

          emit remote_mars_scene_key (device, obj, &&key[0], press);
        else/if type == EVT_SCENE_CLICK then
          var int x = [[ TABLE.x ]];
          var int y = [[ TABLE.y ]];
          var int button = [[ TABLE.button ]];
          var bool press = [[ TABLE.press ]];

          emit remote_mars_scene_mouse_clicked (device, obj, x, y,
                                                button, press);

        else/if type == EVT_PLAYER_CLICK then
          var int x = [[ TABLE.x ]];
          var int y = [[ TABLE.y ]];
          var int button = [[ TABLE.button ]];
          var bool press = [[ TABLE.press ]];

          emit remote_mars_player_mouse_clicked (device, obj, x, y,
                                                 button, press);
        end
      end
    with
      /* SCENE */

      /* KEY */
      var uint obj;
      var _char_ptr_ext key;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, key, press) in mars_scene_key do
        buffer = [] .. "{device=";

        tmp = [] .. [[ tostring(@client.stub.id) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",object=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@obj) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",type=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@EVT_KEY) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",key=\'";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. (_PTR(key) as _char&&);
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. "\',press=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@press) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. "}";
        call R_Vec_Cat (&buffer, &tmp);

        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end
    with
      /* CLICK */
      var uint obj;
      var int x;
      var int y;
      var int button;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, x, y, button, press) in mars_scene_mouse_clicked do
        buffer = [] .. "{device=";

        tmp = [] .. [[ tostring(@client.stub.id) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",object=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@obj) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",type=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@EVT_SCENE_CLICK) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",x=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@x) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",y=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@y) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",button=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@button) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",press=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@press) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. "}";
        call R_Vec_Cat (&buffer, &tmp);

        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end

    with
      /* PLAYER */
      var uint obj;
      var int x;
      var int y;
      var int button;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, x, y, button, press) in mars_player_mouse_clicked do
        buffer = [] .. "{device=";

        tmp = [] .. [[ tostring(@client.stub.id) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",object=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@obj) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",type=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@EVT_PLAYER_CLICK) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",x=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@x) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",y=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@y) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",button=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@button) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. ",press=";
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. [[ tostring(@press) ]];
        call R_Vec_Cat (&buffer, &tmp);

        tmp = [] .. "}";
        call R_Vec_Cat (&buffer, &tmp);

        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end
    end
  end
with
  await mirror_ok;
  #include PROG
end

escape 0;
