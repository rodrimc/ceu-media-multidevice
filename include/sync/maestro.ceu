#include "mars/mars-media.ceu"
#include "mars/core/mars-client.ceu"

native/pos do
  int MIRROR_OK = 0;
  char *ROLE_NAME = NULL;
  int ROLE_INDEX = -1;

	tceu_callback_ret evt_cb (int cmd,
														tceu_callback_arg p1,
														tceu_callback_arg p2,
														const char* filename,
														u32 line)
	{
    tceu_callback_ret ret = { .is_handled=0 };
    if (MIRROR_OK == 1 && cmd == CEU_CALLBACK_STEP)
    {
      tceu_input_JOINED p = {ROLE_NAME, ROLE_INDEX};
      ceu_input (CEU_INPUT_JOINED, &p);

      MIRROR_OK = 0;
      ret.is_handled = 1;
    }
    if (cmd == CEU_CALLBACK_STOP)
    {
      if (ROLE_NAME)
        free (ROLE_NAME);
    }
    return ret;
  }

  void alloc_role_name (size_t size)
  {
    ROLE_NAME = malloc (size);
  }

  tceu_callback cb = { &evt_cb, NULL };
end

native/nohold
  _cb,
  _ceu_callback_register,
  _alloc_role_name,
  _MIRROR_OK,
  _ROLE_NAME,
  _ROLE_INDEX
;

_ceu_callback_register (&&_cb);

input (_char&&, int) JOINED;

/* internal */
event (none) mirror_ok;

par/or do
  var int min_peers = _;

  var Exception.Lua? e;
  catch e do
    [[
      CONFIG = {}
      min_peers = 2
      chunk = loadfile ('config.lua')
      if chunk then
        CONFIG = chunk ()

        min_peers = CONFIG.MIN_PEERS or min_peers
      end
    ]]
    min_peers = [[ min_peers ]];
  end
  if e? then
    _fprintf (_stderr, "[Load_Sync_Config error]: %s\n", e!.message);
  end

  var&? Client client = spawn Client (LOCALHOST, 0);
  watching client do
    await client.stub.all_set_up;

    pool [] Client_Send_Message send_message_pool;
    par do
      var uint id;
      var usize peers;
      (id, peers) = await client.stub.joined;
      _printf ("joined\n");
      /* device_id is defined in mars-media.ceu */
      device_id = id;
    with
      watching mirror_ok do
        var uint new_peer;
        var usize peers;
        every (new_peer, peers) in client.stub.new_peer do
          if (peers >= min_peers) then
            emit mirror_ok;
          end
        end
      end
    with
      loop do
        await client.stub.incoming_message;
        _log ("[APP(%u)] Message: %s\n", client.stub.id, &&client.stub.message[0]);

        [[ TABLE = load (@client.stub.message)() ]]
        var uint device = [[ TABLE.device ]];
        var uint obj = [[ TABLE.object ]];
        var int type = [[ TABLE.type ]];

        if type == EVT_KEY then
          var[] byte key = [] .. [[ TABLE.key ]];
          var bool press = [[ TABLE.press ]];

          emit create_evt_scene_key (device, obj, &&key[0], press);
        else/if type == EVT_SCENE_CLICK then
          var int x = [[ TABLE.x ]];
          var int y = [[ TABLE.y ]];
          var int button = [[ TABLE.button ]];
          var bool press = [[ TABLE.press ]];

          emit create_evt_scene_mouse_clicked (device, obj, x, y,
                                                button, press);

        else/if type == EVT_PLAYER_CLICK then
          var int x = [[ TABLE.x ]];
          var int y = [[ TABLE.y ]];
          var int button = [[ TABLE.button ]];
          var bool press = [[ TABLE.press ]];

          emit create_evt_player_mouse_clicked (device, obj, x, y,
                                                 button, press);
        end
      end
    with
      /* SCENE */

      /* KEY */
      var uint obj;
      var _char_ptr_ext key;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, key, press) in mars_scene_key do

        var[] byte key_buff = [] .. (_PTR(key) as _char&&);
        [[
          luabuff = '{' ..
                    'device=' .. tostring(@client.stub.id)   .. ',' ..
                    'object=' .. tostring(@obj)              .. ',' ..
                    'type='   .. tostring(@EVT_KEY)          .. ',' ..
                    "key='"   .. tostring(@key_buff)         .. "'," ..
                    'press='  .. tostring(@press)            ..
                    '}'
        ]]
        buffer = [] .. [[ luabuff ]];

        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end
    with
      /* CLICK */
      var uint obj;
      var int x;
      var int y;
      var int button;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, x, y, button, press) in mars_scene_mouse_clicked do
        [[
          luabuff = '{' ..
                    'device=' .. tostring(@client.stub.id)   .. ',' ..
                    'object=' .. tostring(@obj)              .. ',' ..
                    'type='   .. tostring(@EVT_SCENE_CLICK)  .. ',' ..
                    'x='      .. tostring(@x)                .. ',' ..
                    'y='      .. tostring(@y)                .. ',' ..
                    'button=' .. tostring(@button)           .. ',' ..
                    'press='  .. tostring(@press)            ..
                    '}'
        ]]
        buffer = [] .. [[ luabuff ]];

        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end

    with
      /* PLAYER */
      var uint obj;
      var int x;
      var int y;
      var int button;
      var bool press;
      var[] byte tmp;
      var[] byte buffer;
      every (obj, x, y, button, press) in mars_player_mouse_clicked do
        [[
          luabuff = '{' ..
                    'device=' .. tostring(@client.stub.id)   .. ',' ..
                    'object=' .. tostring(@obj)              .. ',' ..
                    'type='   .. tostring(@EVT_PLAYER_CLICK) .. ',' ..
                    'x='      .. tostring(@x)                .. ',' ..
                    'y='      .. tostring(@y)                .. ',' ..
                    'button=' .. tostring(@button)           .. ',' ..
                    'press='  .. tostring(@press)            ..
                    '}'
        ]]
        buffer = [] .. [[ luabuff ]];
        spawn Client_Send_Message (&client.stub, &buffer) in send_message_pool;
      end
    end
  end
with
  await mirror_ok;
  par/and do
    #include SRC 
  with
    var[] byte role_name = [] .. "";
    var Exception.Lua? e;
    catch e do
      var ssize len = [[ CLIENT.role.name:len() ]];
      _alloc_role_name(len + 1);

      var ssize i;
      loop i in [1->len] do
        var byte c = [[ string.byte(CLIENT.role.name:sub(@i, @i)) ]];
        _ROLE_NAME[i - 1] = c;
      end
      _ROLE_NAME [len] = {'\0'};
      _ROLE_INDEX = [[ CLIENT.role.index ]];
      _MIRROR_OK = 1;
    end
    if e? then
      _fprintf (_stderr, "[JOINED error]: %s\n", e!.message);
    end
  end
end

escape 0;
