#ifndef _CEU_MARS_SERVER
#define _CEU_MARS_SERVER

#include "uv/uv.ceu"
#include "uv/tcp.ceu"

#include "mars-defs.ceu"

/*** SERVER SIDE ***/
event (uint) send_broadcast_join;
event (uint) send_broadcast_message;
vector []byte cur_payload;

var uint id_ref = 1;
var usize peers_count = 0;

code/await Send_Broadcast_Join (var& _uv_tcp_t client, var uint id) -> void
do
  vector[] byte buffer = [] .. "";

  buffer = [] .. "return {type=" .. [[ tostring(@S_NEW_PEER) ]];
  buffer = buffer .. ",new_peer=" .. [[ tostring (@id) ]];
  buffer = buffer .. ",peers=" .. [[ tostring (@outer.peers_count) ]];
  var u64 ts = _now ();
  buffer = buffer .. ",timestamp=" .. [[ tostring (@ts) ]];
  buffer = buffer .. "}\n";

  await UV_TCP_Write (&client, &buffer);
end

code/await Send_Broadcast_Message (var& _uv_tcp_t client, var uint from,
                                   vector& []byte payload) -> void
do
  vector[] byte buffer = [] .. "";

  buffer = [] .. "return {from=" .. [[ tostring (@from) ]];
  buffer = buffer .. ",type=" .. [[ tostring (@S_BROADCAST) ]];
  buffer = buffer .. ",payload=" .. payload;
  var u64 ts = _now ();
  buffer = buffer .. ",timestamp=" .. [[ tostring (@ts) ]];
  buffer = buffer .. "}\n";

  _debug ("[server] sent: %s", &&buffer[0]);
  await UV_TCP_Write (&client, &buffer);
end

code/await UV_TCP_Server_Handler (var& _uv_tcp_t client) -> int
do
  var uint session = _;
  var uint id = outer.id_ref;
  outer.id_ref = outer.id_ref + 1;
  var u64 start_time = 0;

  outer.peers_count = outer.peers_count + 1;
  do finalize with
    outer.peers_count = outer.peers_count - 1;
  end

  par do
    loop do
      vector[] byte buffer;
      await UV_TCP_ReadLine(&client, &buffer);
      _debug ("[server] received: %s\n", &&buffer[0]);

      var int type = _;

      [[ TABLE =  load (@buffer)()]]
      type = [[ TABLE.type ]];

      if type == P_JOIN then
        buffer = [] .. "return {";
        buffer = buffer .. "type=" .. [[ tostring (@S_JOINED) ]];
        buffer = buffer .. ",id=" .. [[ tostring(@id) ]];
        buffer = buffer .. ",peers=" .. [[ tostring(@outer.peers_count) ]];
        buffer = buffer .. "}\n";

        await UV_TCP_Write (&client, &buffer);
        _debug ("[server] sent: %s\n", &&buffer[0]);

        emit outer.send_broadcast_join (id);

      else/if type == P_REGULAR_SEND then
        var int from = [[ TABLE.from ]];
        vector[] byte payload = [] .. [[ serialize(TABLE.payload) ]];

        outer.cur_payload = [] .. payload;
        emit outer.send_broadcast_message (from);
      end
    end
  with
    var uint new_id;
    every new_id in outer.send_broadcast_join do
      spawn Send_Broadcast_Join (&client, new_id);
    end
  with
    var uint from;
    every from in outer.send_broadcast_message do
      spawn Send_Broadcast_Message (&client, from, &outer.cur_payload);
    end
  end

end

/* We must include tcp-server after we've defined UV_TCP_Server_Handler */
#include "uv/tcp-server.ceu"

#endif
