#include "media/media.ceu"

/*
 * Mapping: scripts/tv_mappings_v2.lua
 */

var Media.Video video = val Media.Video (
                [] .. "resources/bunny.ogg",
                Region (0, 0, 720, 480, 1),
                1.0, 1.0);

var Media.Image control = val Media.Image (
                [] .. "resources/remote_control.png",
                Region (0, 0, 400, 400, 1),
                1.0);

#define SECONDS * 1000000000

input (none) PLAY;
input (none) PAUSE;
input (none) SEEK_FORWARD;
input (none) SEEK_BACKWARD;
input (none) VOLUME_UP;
input (none) VOLUME_DOWN;
input (none) TURN_ON;
input (none) TURN_OFF;

loop do
  await TURN_ON;
  watching TURN_OFF do
    var Size size = val Size (720, 480);
    var&? Scene scene = spawn Scene(size);
    watching scene do
      var&? Play p = spawn Play (&scene.scene, &video);

      event (r64) set_volume;
      watching p do
        par do
          every PLAY do
            _printf ("PLAY\n");
            call Scene_Resume (&scene.scene);
          end
        with
          every PAUSE do
            _printf ("PAUSE\n");
            call Scene_Pause (&scene.scene);
          end
        with
          every SEEK_FORWARD do
            _printf ("SEEK_FORWARD\n");
            call Player_Seek (&p.player, 10 SECONDS , true);
          end
        with
          every SEEK_BACKWARD do
            _printf ("SEEK_BACKWARD\n");
            call Player_Seek (&p.player, -10 SECONDS, true);
          end
        with
          every VOLUME_UP do
            _printf ("VOLUME_UP\n");
            var r64 vol_level = call Player_Get_Double (&p.player, "volume");
            if vol_level < 1.0 then
              vol_level = vol_level + 0.2;
            end
            emit set_volume (vol_level);
          end
        with
          every VOLUME_DOWN do
            _printf ("VOLUME_DOWN\n");
            var r64 vol_level = call Player_Get_Double (&p.player, "volume");
            if vol_level > 0.0 then
              vol_level = vol_level - 0.2;
            end
            emit set_volume (vol_level);
          end
        with
          event (none) draw;
          par do
            loop do
              await draw;
              watching set_volume, 2s do
                var int vol_level = (call Player_Get_Double (&p.player, "volume") * 10) as int;

                var[] byte vol_bar = _;
                if vol_level == 0 then
                  vol_bar = [] .. "resources/vol_0.png";
                else/if vol_level == 2 then
                  vol_bar = [] .. "resources/vol_1.png";
                else/if vol_level == 4 then
                  vol_bar = [] .. "resources/vol_2.png";
                else/if vol_level == 6 then
                  vol_bar = [] .. "resources/vol_3.png";
                else/if vol_level == 8 then
                  vol_bar = [] .. "resources/vol_4.png";
                else/if vol_level == 10 then
                  vol_bar = [] .. "resources/vol_5.png";
                end

                var Media.Image volume = val Media.Image (
                                [] .. vol_bar, Region (0, 0, 232, 119, 2), 1.0);

                await Play (&scene.scene, &volume);
              end
            end
          with
            var r64 vol_level = _;
            every vol_level in set_volume do
              call Player_Set_Double (&p.player, "volume", vol_level);
              emit draw;
            end
          end
        end
      end
    end
  end
end
