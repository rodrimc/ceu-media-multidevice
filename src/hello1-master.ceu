#include "multidevice.ceu"

#define SESSION 0

event (void) joined;
event (void) started;
event (u64) do_seek;

var bool ok = true;
var int id = -1;

var char [] tmp = [[ tostring (@JOIN) ]];
var char [] msg = [] .. "return {code=" .. tmp;

var Client c = Client.build (LOCALHOST, 8888);
await c.ok;

tmp = [] .. "";
tmp = [[ tostring (@SESSION) ]];
msg = [] .. msg .. ",session=" .. tmp;

/* send JOIN message */
var u64 msg_ts = _now();
tmp = [] .. "";
tmp = [[ tostring (@msg_ts) ]];
msg = [] .. msg .. ",timestamp=" .. tmp .. "}\n";

_printf ("[player] timestamp: %llu\n", msg_ts);
_printf ("sending: %s\n", &&msg[0]);

do UV_Stream_Write.build (&_UV_STREAM_ALIAS(c.tcp), &msg);

par/or do 
  loop do
    var byte [BUFF_SIZE] buff;
    var int code;

    /* await message */
    var u64 t2 = _now ();
    do UV_Stream_ReadLine.build (&_UV_STREAM_ALIAS(c.tcp), &buff);
    var u64 t = _now ();
    _printf ("[player] read: %s", &&buff[0]);
  
    /* parse message */
    [[ TABLE =  load (@buff)()]]
    tmp = [] .. "";
    tmp = [[ tostring(TABLE.timestamp) ]];
    var u64 delay_estimation = t - _strtoull (&&tmp[0], null, 10);

    code = [[ TABLE.code ]];
    if code == JOIN then
      var int reply;
      reply = [[ TABLE.reply ]];
    
      if reply != OK then
        _printf ("[player] I've received an error\n");
        break;
      end
      id = [[ TABLE.id ]];
      _printf ("[player] My id: %d\n", id);
      emit joined;

      tmp = [] .. "";
      tmp = [[ tostring(TABLE.seek) ]];
      
      await started;
      nothing;
      var u64 seek = _strtoull (&&tmp[0], null, 10);
      _printf ("[player] seek: %llu\n", seek);
      emit do_seek => seek + delay_estimation;
    else
      _printf ("[player] Unknown code\n");
    end
  end
with
  await joined;
  var int width = 640;
  var int height = 480;

  var Scene s with
    this.size = Size (width, height);
    this.auto_advance = true;
  end;

  var Media video = Media.VIDEO ("../../resources/animGar.mp4", 
                                  Region (0, 0, width, height), 1.0, 1.0, 0);

  watching s.key_event do
    var Player p = Player.play (video, &s);

    var u64 pending_seek = 0;
    par/and do
      await p.start;
      emit started;
    with
      pending_seek = await do_seek;
    end
    p.seek (pending_seek, false); 

    every ts in do_seek do
      _printf ("seek: %llu\n", ts);
      p.seek (ts, false); 
    end
  end
end

escape 0;
