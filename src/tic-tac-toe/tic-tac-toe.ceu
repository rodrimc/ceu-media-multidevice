#include "media/media.ceu"

#define UNKNOWN -1
#define X        0
#define O        1

native/pos do
  int get_player ()
  {
    char *player = NULL;
    char c;
    while ((c = getopt (CEU_APP.argc, CEU_APP.argv, "idp:")) != -1)
    {
      switch (c)
      {
        case 'p':
        {
          player = optarg;
          break;
        }
      }
    }
    if (player)
    {
      if (strcmp(player, "X") == 0)
        return X;
      else if (strcmp (player, "O") == 0)
        return O;
    }

    return UNKNOWN;
  }
end

native/nohold
  _get_player,
;

var int player = _get_player();
var byte my_char;

if player == X then
  my_char = {'x'};
else/if player == O then
  my_char = {'o'};
else
  escape -1;
end

_printf ("player: %d\n", my_char);

var int width  = 300;
var int height = 300;

var Media.Image background = val Media.Image (
    [] .. "resources/tic-tac-toe/background.png",
    Region (0, 0, width, height, 1), 1.0);

code/tight Get_Index (var int x, var int y) -> int
do
  escape y / (outer.height / 3) * 3 + x / (outer.width / 3);
end

code/await Draw_Icon (var int index, var byte turn, var& IScene s) -> none
do
  var int x = index % 3;
  var int y = index / 3;

  var int dx = outer.width / 3;
  var int dy = outer.height / 3;

  var[] byte path = [] .. "resources/tic-tac-toe/";
  $path = $path - 1;
  path = path .. [turn];
  path = path .. ".png";

  var Media.Image icon = val Media.Image ([] .. path,
    Region (x * dx, y * dy, dx, dy, 2), 1.0);

  await Play (&s, &icon);
end

code/tight Check_Winner (var&[] byte board) -> byte
do
  if board[0] == board[1] and board[1] == board[2] and board[0] != {'.'} then
    escape board[0];
  else/if board[3] == board[4] and board[4] == board[5] and board[3] != {'.'} then
    escape board[3];
  else/if board[6] == board[7] and board[7] == board[8] and board[6] != {'.'} then
    escape board[6];
  else/if board[0] == board[3] and board[3] == board[6] and board[0] != {'.'} then
    escape board[0];
  else/if board[1] == board[4] and board[4] == board[7] and board[1] != {'.'} then
    escape board[1];
  else/if board[2] == board[5] and board[5] == board[8] and board[2] != {'.'} then
    escape board[2];
  else/if board[0] == board[4] and board[4] == board[8] and board[0] != {'.'} then
    escape board[0];
  else/if board[6] == board[4] and board[4] == board[2] and board[4] != {'.'} then
    escape board[6];
  else
    escape {'.'};
  end
end

var&? Scene scene = spawn Scene(Size(width, height));
watching scene
do
  input (int, int) OPPONENT_MOVE;
  output (int, int) MY_MOVE;

  event (byte) finish;

  pool[] Draw_Icon draw_pool;
  var int count = 9;
  var byte winner = _;
  var[] byte board = [] .. ".........";
  var bool myturn = my_char == {'x'};

  par/or do
    await Play (&scene.scene, &background);
  with
    var int x;
    var int y;
    var bool press;

    every (_, x, y, _,  press) in CM_SCENE_MOUSE_CLICK do
      if press and myturn then
        var int index = call Get_Index (x, y);

        if board[index] == {'.'} then
          _printf ("my_move\n");
          emit MY_MOVE (x, y);
          count = count - 1;
          board[index] = my_char;
          spawn Draw_Icon (index, my_char, &scene.scene) in draw_pool;

          var byte c = call Check_Winner (&board);
          _printf ("check_winner: %c\n\n", c);
          if c != {'.'} or count == 0 then
            emit finish (c);
          end

          myturn = false;
        end
      end
    end
  with
    var int x;
    var int y;
    var byte opponent_char;
    if my_char == {'x'} then
      opponent_char = {'o'};
    else
      opponent_char = {'x'};
    end

    every (x, y) in OPPONENT_MOVE do
      _printf ("OPPONENT_MOVE\n");
      var int index = call Get_Index (x, y);
      board[index] = opponent_char;
      count = count - 1;
      spawn Draw_Icon (index, opponent_char, &scene.scene) in draw_pool;

      var byte c = call Check_Winner (&board);
      _printf ("check_winner: %c\n\n", c);
      if c != {'.'} or count == 0 then
        emit finish (c);
      end

      myturn = true;
    end
  with
    winner = await finish;
    var[] byte msg;
    if winner != {'.'} then
      msg = [] .. "Winner: ";
      $msg = $msg - 1;
      msg = msg .. [winner];
      msg = msg .. [{'\0'}];
    else
      msg = [] .. "No winner\0";
    end

    var Media.Text final_msg = val Media.Text (
                                      [] .. msg, [] .. "60",
                                      Region (50, 100, 200, 100, 3),
                                      0xff00ff00);
    watching 3s
    do
      await Play (&scene.scene, &final_msg);
    end
  end
  _printf ("winner: %c\n", winner);
end
