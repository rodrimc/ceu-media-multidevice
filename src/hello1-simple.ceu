#include "multidevice.ceu"

#include "media.ceu"
#define SESSION 0

event (int) joined;
event (u64, bool) do_seek;
event (u64) do_pause;
event (void) do_resume;

var bool ok = true;
var int id = -1;

var char [] tmp = [[ tostring (@JOIN) ]];
var char [] msg = [] .. "return {code=" .. tmp;

var Client c = Client.build (LOCALHOST, 8888);
await c.ok;

tmp = [] .. "";
tmp = [[ tostring (@SESSION) ]];
msg = [] .. msg .. ",session=" .. tmp;

/* send JOIN message */
var u64 msg_ts = _now();
tmp = [] .. "";
tmp = [[ tostring (@msg_ts) ]];
msg = [] .. msg .. ",timestamp=" .. tmp .. "}\n";

do UV_Stream_Write.build (&_UV_STREAM_ALIAS(c.tcp), &msg);

par/or do
  loop do
    var byte [BUFF_SIZE] buff;
    var int code;

    /* await message */
    do UV_Stream_ReadLine.build (&_UV_STREAM_ALIAS(c.tcp), &buff);
    var u64 msg_received_time = _now ();
    _printf ("[player (%d)] read: %s", id, &&buff[0]);

    /* parse message */
    [[ TABLE =  load (@buff)()]]

    code = [[ TABLE.code ]];
    if code == JOIN then
      var int reply;
      reply = [[ TABLE.reply ]];

      if reply != OK then
        _printf ("[player (%d)] I've received an error\n", id);
        break;
      end
      id = [[ TABLE.id ]];
      _printf ("[player (%d)] My id: %d\n", id, id);

      emit joined => id;
    else/if code == PAUSE then
      _printf ("[player (%d)] pause\n", id);
      var int from = [[ TABLE.from ]];

      tmp = [] .. "";
      tmp = [[ tostring (TABLE.pause_time) ]];

      var u64 pause_offset = _strtoull (&&tmp[0], null, 10);

      if (from != id) then
        emit do_pause => pause_offset;
      end
    else
      _printf ("[player (%d)] unknown code\n", id);
    end
  end
with
  await joined;
  var int width = 640;
  var int height = 480;

  var Scene s with
    this.size = Size (width, height);
    this.interval = 30 * NS;
  end;

  var Media video = Media.VIDEO ("../../resources/animGar.mp4",
                                  Region (0, 0, width, height), 1.0, 1.0, 0);
  var Player p = Player.play (video, &s);

  watching s do
    par do
      loop do
        var int press;
        var char&& str;
        (str, press) = await s.key_event;
        if press == 1 then
          if (_strcmp (str, "q") == 0) then
            emit s.quit;
          else/if (_strcmp(str, "space") == 0) then
            var u64 running_time = p.get_running_time();
            s.freeze ();

            tmp = [] .. "";
            msg = [] .. "";

            tmp = [[ tostring (@PAUSE) ]];
            msg = [] .. "return {code=" .. tmp;

            tmp = [] .. "";
            tmp = [[ tostring (@running_time) ]];

            msg = [] .. msg .. ",pause=" .. tmp;

            var u64 now = _now();
            tmp = [] .. "";
            tmp = [[ tostring (@now) ]];
            msg = [] .. msg .. ",timestamp=" .. tmp;
            msg = [] .. msg .. "}\n";

            do UV_Stream_Write.build (&_UV_STREAM_ALIAS(c.tcp), &msg);
          end
        end
      end
    with
      var u64 time = await do_pause;
      _printf ("[player (%d)] pause offset: %llu\n", id, time);

      p.request_seek (time, false);
      await p.seek;

      /* This should result in differece of at most 2 frames*/
      await s.tick;
      await s.tick;

      _printf ("[player (%d)] freezing scene\n", id);
      s.freeze ();
      await FOREVER;
    end
  end
end

escape 0;
