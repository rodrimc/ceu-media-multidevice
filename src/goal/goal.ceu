#include "media/media.ceu"

native/pos do
  int im_shooter ()
  {
    static int im_shooter = 0;

    char c;
    while ((c = getopt (CEU_APP.argc, CEU_APP.argv, "idp:")) != -1)
    {
      if (c == 'p' && strcmp (optarg, "SHOOTER") == 0)
      {
        return 1;
      }
    }
    return 0;
  }
end

native/nohold
  _im_shooter,
;

var int width   = 320;
var int height = 420;

var&? Scene s = spawn Scene (Size (width, height));
var Region r = val Region (0, 0, width, height, 1);

#define LEFT  1 
#define RIGHT 2

#define ANIM_DUR 1s

code/await Draw_Anim (var int shoot_dir,
                      var int goalkeeper_dir,
                      var& IScene s) -> none
do
  var Properties.Image b1;
  var Properties.Image b2;
  var Properties.Image b3;

  var Properties.Image gk1;
  var Properties.Image gk2;
  var Properties.Image gk3;

  outer.r.z = 2;

  var[] byte player1;
  var[] byte player2;
  var[] byte player3;

  if shoot_dir == RIGHT then
    player1 = [] .. "resources/goal/sdir1_ball.png";
    player2 = [] .. "resources/goal/sdir2_ball.png";
    player3 = [] .. "resources/goal/sdir3_ball.png";

    b1 = val Properties.Image (outer.r, 1.0);
    b2 = val Properties.Image (outer.r, 1.0);
    b3 = val Properties.Image (outer.r, 1.0);
  else
    player1 = [] .. "resources/goal/sesq1_ball.png";
    player2 = [] .. "resources/goal/sesq2_ball.png";
    player3 = [] .. "resources/goal/sesq3_ball.png";

    b1 = val Properties.Image (outer.r, 1.0);
    b2 = val Properties.Image (outer.r, 1.0);
    b3 = val Properties.Image (outer.r, 1.0);
  end

  var[] byte goalkeeper1;
  var[] byte goalkeeper2;
  var[] byte goalkeeper3;

  outer.r.z = 1;
  if goalkeeper_dir == RIGHT then
    goalkeeper1 = [] .. "resources/goal/gdir1.png";
    goalkeeper2 = [] .. "resources/goal/gdir2.png";
    goalkeeper3 = [] .. "resources/goal/gdir3.png";

    gk1 = val Properties.Image (outer.r, 1.0);
    gk2 = val Properties.Image (outer.r, 1.0);
    gk3 = val Properties.Image (outer.r, 1.0);
  else
    goalkeeper1 = [] .. "resources/goal/gesq1.png";
    goalkeeper2 = [] .. "resources/goal/gesq2.png";
    goalkeeper3 = [] .. "resources/goal/gesq3.png";

    gk1 = val Properties.Image (outer.r, 1.0);
    gk2 = val Properties.Image (outer.r, 1.0);
    gk3 = val Properties.Image (outer.r, 1.0);
  end

  watching ANIM_DUR 
  do
    par do
      await Play (&goalkeeper1, &gk1, &s);
    with
      await Play (&player1, &b1, &s);
    end
  end

  watching ANIM_DUR 
  do
    par do
      await Play (&goalkeeper2, &gk2, &s);
    with
      await Play (&player2, &b2, &s);
    end
  end

  watching ANIM_DUR 
  do
    par do
      await Play (&goalkeeper3, &gk3, &s);
    with
      await Play (&player3, &b3, &s);
    end
  end
end

output (int) MY_MOVE;
input (int) OPPONENT_MOVE;

watching s
do
  do
    var[] byte intro = [] .. "resources/goal/intro.png";
    var Properties.Image prop = val Properties.Image (
                        r, 1.0);
    par/or do
      await Play (&intro, &prop, &s.handle);
    with
      await CM_PLAYER_MOUSE_CLICK;
    end
  end

  var bool im_shooter = _im_shooter () as bool;

  var[] byte img;
  if im_shooter then
    img = [] .. "resources/goal/bgs.png";
  else
    img = [] .. "resources/goal/bgg.png";
  end

  var Properties.Image prop = val Properties.Image(r, 1.0);

  var int choice = _;
  var int opponent_choice = _;

  watching Play (&img, &prop, &s.handle)
  do
    par/and do
      var _char_ptr_ext key;
      (_, key, _) = await CM_SCENE_KEY until 
                                  (_strcmp (key, "Right") == 0 or
                                   _strcmp (key, "Left") == 0);
      if key[0] == {'R'} then
        choice = RIGHT;
      else
        choice = LEFT;
      end
      _printf ("choice: %d\n", choice);
      emit MY_MOVE (choice);
    with
      opponent_choice = await OPPONENT_MOVE;
      _printf ("opponent_choice: %d\n", opponent_choice);
    end
  end

  if im_shooter then
    await Draw_Anim (choice, opponent_choice, &s.handle);
  else
    await Draw_Anim (opponent_choice, choice, &s.handle);
  end
end

escape 0;

