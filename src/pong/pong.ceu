#include "media/media.ceu"

native/pos do
  ##include <math.h>

  int get_player ()
  {
    char *player = NULL;
    char c;
    while ((c = getopt (CEU_APP.argc, CEU_APP.argv, "idp:")) != -1)
    {
      switch (c)
      {
        case 'p':
        {
          player = optarg;
          break;
        }
      }
    }
    if (player)
    {
      if (strcmp(player, "1") == 0)
        return 1;
      else if (strcmp (player, "2") == 0)
        return 2;
    }

    return -1;
  }
end

native
  _get_player
;

#define UP    1
#define DOWN -1

output (int, int) MOVE;
input  (int, int) UPDATE_POS;

var int width = 600;
var int height = 400;

var int img_width = 30;
var int img_height = 100;

var int ball_width = 30;
var int ball_height = 30;

data Direction with
  var real x;
  var real y;
end;

var int turn = 1;
var int wall = 1;

var bool have_won = _;
event (none) round_ended;

code/tight
Compute_Collision (var& IPlayer ball, var &IPlayer green,
    var& IPlayer red, var& Direction dir, var& real speed) -> none do

  var int x = call Player_Get_Int (&ball, "x");
  var int y = call Player_Get_Int (&ball, "y");

  var int green_x = call Player_Get_Int (&green, "x");
  var int green_y = call Player_Get_Int (&green, "y");

  var int red_x = call Player_Get_Int (&red, "x");
  var int red_y = call Player_Get_Int (&red, "y");

  if (outer.turn == -1 and x < outer.img_width  and
      y >= green_y and y <= green_y + outer.img_height) or
     (outer.turn == 1  and
      x > outer.width - (outer.img_width + outer.ball_width) and
      y >= red_y and y <= red_y + outer.img_height) then
    dir.x = dir.x * -1;
    speed = speed + 0.05;
    outer.turn = outer.turn * -1;
  end

  if (y <= 0 and outer.wall == 1) or
     (y + outer.ball_height >= outer.height and outer.wall == -1) then
    dir.y = dir.y * -1;
    outer.wall = outer.wall * -1;
  end
end

code/tight
Update (var& IPlayer ball, var& Direction dir, var real speed,
    var real time_diff) -> none do

  var int x = call Player_Get_Int (&ball, "x");
  var int y = call Player_Get_Int (&ball, "y");

  var int newx = x + (_ceil (dir.x * speed * time_diff) as int);
  var int newy = y + (_ceil (dir.y * speed * time_diff) as int);

  call Player_Set_Int (&ball, "x", newx);
  call Player_Set_Int (&ball, "y", newy);
end

var[] byte greenuri = [] .. "resources/green.png"; 
var[] byte reduri   = [] .. "resources/red.png"; 
var[] byte blueuri  = [] .. "resources/blue.png";
var[] byte dummy    = _;

var Properties.Image green = val Properties.Image (
  Region (0, height/2 - img_height/2, 0, 0, 1), 1.0);
var Properties.Image red   = val Properties.Image (
  Region (width - img_width, height/2 - img_height/2, 0, 0, 1), 1.0);
var Properties.Image blue  = val Properties.Image (
  Region (img_width + 20, height/2 - 15, 0, 0, 1), 1.0);

var&? Scene scene = spawn Scene (Size (600, 400));
var Region text_region = val Region (0, height - 200, 600, 200, 2);

watching scene
do
  var&? Play p_green = spawn Play (&greenuri, &green, &scene.handle);
  var&? Play p_red   = spawn Play (&reduri, &red,  &scene.handle);
  var&? Play p_ball  = spawn Play (&blueuri, &blue, &scene.handle);

  var&? Play self;
  var&? Play opponent;
  var uint color;
  var[] byte text = [] .. "Your color is ";
  $text = $text - 1;
  var int player = _get_player();

  if player == 1 then
    color = 0xff00ff00;
    text = text .. "green";
    self = &p_green;
    opponent = &p_red;
  else
    color = 0xffff0000;
    text = text .. "red";
    self = &p_red;
    opponent = &p_green;
  end

  par/or do
    var Properties.Text display = val Properties.Text ([] .. text,
      [] .. "sans bold 30", text_region, color);

    await Play (&dummy, &display, &scene.handle);
  with
    var _char_ptr_ext key;
    var bool press;
    every (_, key, press) in CM_SCENE_KEY do
      if press then
        var int y = call Player_Get_Int (&self!.handle, "y");
        var int h = call Player_Get_Int (&self!.handle, "height");
        if _strcmp (key, "Up") == 0 and y >= 0 then
          emit MOVE (player, UP);
        else/if _strcmp (key, "Down") == 0 and y + h <= height then
          emit MOVE (player, DOWN);
        end
      end
    end
  with
    var int source;
    var int amount;
    every (source, amount) in UPDATE_POS do
      _printf ("%d, %d\n", source, amount);
      if source == player then
        var int y = call Player_Get_Int (&self!.handle, "y");
        call Player_Set_Int (&self!.handle, "y", y + amount);
      else
        var int y = call Player_Get_Int (&opponent!.handle, "y");
        call Player_Set_Int (&opponent!.handle, "y", y + amount);
      end
    end
  with
    var Direction dir = val Direction (2.5, -3);
    var int tick = 30;
    var real speed = 0.4;
    every (tick)ms do
      call Update (&p_ball!.handle, &dir, speed, tick * 0.1);
      call Compute_Collision (&p_ball!.handle, &p_green!.handle,
        &p_red!.handle, &dir, &speed);

      var int x = call Player_Get_Int (&p_ball!.handle, "x");

      if x <= 0 then
        if self!.handle.self == p_red!.handle.self then
          have_won = true;
        else
          have_won = false;
        end
        emit round_ended;
      else/if x >= width then
        if self!.handle.self == p_red!.handle.self then
          have_won = false;
        else
          have_won = true;
        end
        emit round_ended;
      end
    end
  with
    await round_ended;
  end

  var Properties.Text m_end;
  if have_won then
    m_end = val Properties.Text ([] .. "Congrats, you won!", [] .. "40",
      Region (0, 0, 200, 50, 2), 0xff00ff00);
  else
    m_end = val Properties.Text ([] .. "Game Over!", [] .. "40",
      Region (0, 0, 200, 50, 2), 0xff00ff00);
  end

  m_end.region = text_region;
  watching 5s do
    await Play (&dummy, &m_end, &scene.handle);
  end
end

escape 0;
