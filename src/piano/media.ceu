#define C  1
#define CS 2
#define D  3 
#define DS 4 
#define E  5 
#define F  6
#define FS 7 
#define G  8 
#define GS 9 
#define A  10 
#define AS 11 
#define B  12 

var [] byte t1    = [] .. "resources/piano/type1.png";
var [] byte t2    = [] .. "resources/piano/type2.png";
var [] byte t3    = [] .. "resources/piano/type3.png";
var [] byte sharp = [] .. "resources/piano/sharp.png";

var [] byte t1_sel    = [] .. "resources/piano/type1_sel.png";
var [] byte t2_sel    = [] .. "resources/piano/type2_sel.png";
var [] byte t3_sel    = [] .. "resources/piano/type3_sel.png";
var [] byte sharp_sel = [] .. "resources/piano/sharp_sel.png";

/* KEYS */
var Properties.Image c = val Properties.Image (
    Region (0, 0, key_width, key_height, 1), 1.0);

var Properties.Image cs = val Properties.Image (
    Region (key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image d = val Properties.Image (
    Region (key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image ds = val Properties.Image (
    Region (2 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image e = val Properties.Image (
    Region (2 * key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image f = val Properties.Image (
    Region (3 * key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image fs = val Properties.Image (
    Region (4 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image g = val Properties.Image (
    Region (4 * key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image gs = val Properties.Image (
    Region (5 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image a = val Properties.Image (
    Region (5 * key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image as_ = val Properties.Image (
    Region (6 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image b = val Properties.Image (
    Region (6 * key_width, 0, key_width, key_height, 1), 1.0);

var Properties.Image c_sel = val Properties.Image (
    Region (0, 0, key_width, key_height, 3), 1.0);

var Properties.Image cs_sel = val Properties.Image (
    Region (key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 3), 1.0);

var Properties.Image d_sel = val Properties.Image (
    Region (key_width, 0, key_width, key_height, 3), 1.0);

var Properties.Image ds_sel = val Properties.Image (
    Region (2 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 3), 1.0);

var Properties.Image e_sel = val Properties.Image (
    Region (2 * key_width, 0, key_width, key_height, 3), 1.0);

var Properties.Image f_sel = val Properties.Image (
    Region (3 * key_width, 0, key_width, key_height, 3), 1.0);

var Properties.Image fs_sel = val Properties.Image (
    Region (4 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 3), 1.0);

var Properties.Image g_sel = val Properties.Image (
    Region (4 * key_width, 0, key_width, key_height, 3), 1.0);

var Properties.Image gs_sel = val Properties.Image (
    Region (5 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 3), 1.0);

var Properties.Image a_sel = val Properties.Image (
    Region (5 * key_width, 0, key_width, key_height, 3), 1.0);

var Properties.Image as_sel = val Properties.Image (
    Region (6 * key_width - sharp_width/2, 0, 
                         sharp_width, sharp_height, 2), 1.0);

var Properties.Image b_sel = val Properties.Image (
    Region (6 * key_width, 0, key_width, key_height, 3), 1.0);


/* SOUNDS */

var[] byte c_sound   = [] .. "resources/piano/c1.wav";
var[] byte cs_sound  = [] .. "resources/piano/c1s.wav";
var[] byte d_sound   = [] .. "resources/piano/d1.wav";
var[] byte ds_sound  = [] .. "resources/piano/d1s.wav";
var[] byte e_sound   = [] .. "resources/piano/e1.wav";
var[] byte f_sound   = [] .. "resources/piano/f1.wav";
var[] byte fs_sound  = [] .. "resources/piano/f1s.wav";
var[] byte g_sound   = [] .. "resources/piano/g1.wav";
var[] byte gs_sound  = [] .. "resources/piano/g1s.wav";
var[] byte a_sound   = [] .. "resources/piano/a1.wav";
var[] byte as_sound  = [] .. "resources/piano/a1s.wav";
var[] byte b_sound   = [] .. "resources/piano/b1.wav";

var Properties.Audio audioprop = val Properties.Audio (1.0);

code/await Play_Note (var int note, var& IScene s) -> none
do
  if note == C then
    par/or do
      await Play (&outer.c_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t1_sel, &outer.c_sel, &s);
    with
      await 1s;
    end
  else/if note == CS then
    par/or do
      await Play (&outer.cs_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.cs_sel, &s);
    with
      await 1s;
    end
  else/if note == D then
    par/or do
      await Play (&outer.d_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t2_sel, &outer.d_sel, &s);
    with
      await 1s;
    end
  else/if note == DS then
    par/or do
      await Play (&outer.ds_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.ds_sel, &s);
    with
      await 1s;
    end
  else/if note == E then
    par/or do
      await Play (&outer.e_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t3_sel, &outer.e_sel, &s);
    with
      await 1s;
    end
  else/if note == F then
    par/or do
      await Play (&outer.f_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t1_sel, &outer.f_sel, &s);
    with
      await 1s;
    end
  else/if note == FS then
    par/or do
      await Play (&outer.fs_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.fs_sel, &s);
    with
      await 1s;
    end
  else/if note == G then
    par/or do
      await Play (&outer.g_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t2_sel, &outer.g_sel, &s);
    with
      await 1s;
    end
  else/if note == GS then
    par/or do
      await Play (&outer.gs_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.gs_sel, &s);
    with
      await 1s;
    end
  else/if note == A then
    par/or do
      await Play (&outer.a_sound, &outer.audioprop, &s);
    with
      await Play (&outer.t2_sel, &outer.a_sel, &s);
    with
      await 1s;
    end
  else/if note == AS then
    par/or do
      await Play (&outer.as_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.as_sel, &s);
    with
      await 1s;
    end
  else/if note == B then
    par/or do
      await Play (&outer.b_sound, &outer.audioprop, &s);
    with
      await Play (&outer.sharp_sel, &outer.b_sel, &s);
    with
      await 1s;
    end
  end
end
