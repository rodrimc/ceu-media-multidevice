#include "mars/util/mars-media.ceu"

var _char&& name;
(name, _) = await JOINED;
var bool im_tv = _strcmp (name, "TV") == 0;

_printf ("im_tv: %d\n", im_tv);

var Media.Video video = val Media.Video (
                [] .. "resources/bunny.ogg",
                Region (0, 0, 720, 480, 1),
                1.0, 1.0);

var Media.Image control = val Media.Image (
                [] .. "resources/remote_control.png",
                Region (0, 0, 400, 400, 1),
                1.0);

#define SECONDS * 1000000000

par do
  if im_tv then
    /* tv.ceu */
    input (none) PLAY;
    input (none) PAUSE;
    input (none) SEEK_FORWARD;
    input (none) SEEK_BACKWARD;
    input (none) TURN_OFF;

    watching TURN_OFF do
      var Size size = val Size (720, 480);
      var&? Scene scene = spawn Scene(size);
      watching scene do
        await PLAY;
        var&? Play p = spawn Play (&scene.scene, &video);

        par do
          every PLAY do
            call Scene_Resume (&scene.scene);
          end
        with
          every PAUSE do
            call Scene_Pause (&scene.scene);
          end
        with
          every SEEK_FORWARD do
            call Player_Seek (&p!.player, 10 SECONDS , true);
          end
        with
          every SEEK_BACKWARD do
            call Player_Seek (&p!.player, -10 SECONDS, true);
          end
        end
      end
    end
  end
with
  if not im_tv then
    /* control.ceu */
    output (none) SPACE;
    output (none) P;
    output (none) RIGHT;
    output (none) LEFT;
    output (none) ESC;

    var Size size = val Size (400, 400);
    var&? Scene scene = spawn Scene(size);

    watching scene do
      spawn Play (&scene.scene, &control);
      var bool press;
      var _char_ptr_ext key;
      every (_, key, press) in CM_SCENE_KEY do
        _printf ("%s\n", key);
        if press then
          if _strcmp(key, "space") == 0 then
            emit SPACE ();
          else/if _strcmp (key, "p") == 0 then
            emit P ();
          else/if _strcmp (key, "Right") == 0 then
            emit RIGHT ();
          else/if _strcmp (key, "Left") == 0 then
            emit LEFT ();
          else/if _strcmp (key, "Escape") == 0 then
            emit ESC ();
          end
        end
      end
    end
  end
end
